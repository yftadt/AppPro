plugins {
    id 'com.android.application'// Android应用插件

}
apply from: "$rootDir/rely.gradle"
def appName = new String(apkName.getBytes("iso8859-1"), "UTF-8")
//测试环境地址
def testUrl = "\"http://10.168.3.101\""
def isLog=appIsLog
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    defaultConfig {
        applicationId apklicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode apkVesionCode.toInteger()
        versionName apkVesionName
        ndk {
            //abiFilters "armeabi"//bugly, "x86"
            abiFilters "arm64-v8a", 'armeabi' // bugly

        }
        //会被打入gradleResValues.xml
        resValue "string", "app_name", appName.toString()
    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        key {
            storeFile file(signFile)
            storePassword signPwd
            keyAlias signAlias
            keyPassword signPwd
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true//去掉不用资源
            signingConfig signingConfigs.key
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_buildTypes", "release"
            if("true".equals(isLog)){
                //不允许网络抓包
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-nolog.pro'
                manifestPlaceholders = [NETWORK_SECURITY_CONFIG: ""]
            }else {
                //允许网络抓包
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                manifestPlaceholders = [NETWORK_SECURITY_CONFIG: "@xml/network_security_config"]
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false//去掉不用资源
            signingConfig signingConfigs.key
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_buildTypes", "debug"
            //允许网络抓包
            manifestPlaceholders = [NETWORK_SECURITY_CONFIG: "@xml/network_security_config"]

        }
    }


    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding = true
        // compose true
    }
    //多渠道打包
    flavorDimensions = ["version"]
    productFlavors {
        //测试环境
        trial {
            dimension = 'version'
            buildConfigField "String", "base_url", testUrl.toString()
        }
        //正式环境
        dev {
            dimension = 'version'
            buildConfigField "String", "base_url", testUrl.toString()
        }

    }

    applicationVariants.all { variant ->
        def outputFileDir = "${project.projectDir.absolutePath}/${variant.buildType.name}"
        def today = new Date()
        def env = ""
        variant.outputs.forEach {
            variant.productFlavors.each { product ->
                if (product.name == "trial") {
                    env = "test_"
                } else if (product.name == "dev") {
                    env = "dev_"
                }
            }
            def appNameData = appName
            def  versionName=variant.versionName
            def path = appNameData +"_"+ android.defaultConfig.applicationId+ "_V" + variant.versionName+ "_" + env +  "_" + today.format('yyyyMMddHHmm', TimeZone.getTimeZone("GMT+08:00"))+ "_" + variant.buildType.name + ".apk"
            //def path=env+appNameData
            it.outputFileName = path
        }
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    api project(':dimen')
    //图片选择框架
   /* implementation files('libs\\optionv12.aar')
    //list
    implementation files('libs\\list-library-v1.aar')*/
    //
    api project(':test')
    api project(':baseui')
}
